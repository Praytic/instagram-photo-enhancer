# -*- coding: utf-8 -*-
"""Soft-Panoramic-Transition-Tool.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S7aBUcfX4NVaCxdKmde-eQcWA1zdL1zW
"""

import cv2
import os

from dataclasses import dataclass, astuple

@dataclass
class Vec2:
    x: int
    y: int

    @staticmethod
    def zero(self):
      return Vec2(0, 0)

    def __post_init__(self):
        self.x = int(self.x)
        self.y = int(self.y)

story_resolution = Vec2(1080, 1920)
image_folder = 'sample_images'
video_name = 'output_video_dir/video.mp4'

images = [img for img in os.listdir(image_folder) if img.endswith(".JPG")]
frame = cv2.imread(os.path.join(image_folder, images[0]))

height, width = frame.shape[:2]

start_size, end_size = Vec2(1080, 1920), Vec2(height / 1920 * 1080, height)
start_vec = Vec2(width / 2 - start_size.x / 2, height / 2 - start_size.y / 2)
end_vec = Vec2(width / 2 - end_size.x / 2, height / 2 - end_size.y / 2)
fps = 30
video_length = 15

print(f"End size: {end_size}")

transition_speed = video_length * fps

def mov_vec2(start_vec: Vec2, end_vec: Vec2,transition_step: int):
  return Vec2(start_vec.x + transition_step * (end_vec.x - start_vec.x) / transition_speed, 
              start_vec.y + transition_step * (end_vec.y - start_vec.y) / transition_speed)

def crop(point: Vec2, crop_size: Vec2, img):
  return img[point.y:point.y + crop_size.y, point.x:point.x + crop_size.x]

cropped_images = []
for idx, img in enumerate([frame] * transition_speed):
    crop_size = mov_vec2(start_size, end_size, idx)
    crop_point = mov_vec2(start_vec, end_vec, idx)
    cropped_img = crop(crop_point, crop_size, img)
    cropped_img = cv2.resize(cropped_img, astuple(end_size), interpolation=cv2.INTER_CUBIC)
    cropped_images.append(cropped_img)

fourcc = cv2.VideoWriter_fourcc(*'mp4v')
video = cv2.VideoWriter(video_name, fourcc, fps, astuple(end_size))

for image in cropped_images:
    assert image.shape[:2] == astuple(end_size)[::-1]
    video.write(image)

cv2.destroyAllWindows()
video.release()

image.shape[:2][::-1]

astuple(end_size)